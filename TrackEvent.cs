// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: track_event.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace UnityPerfetto.Protos {

  /// <summary>Holder for reflection information generated from track_event.proto</summary>
  public static partial class TrackEventReflection {

    #region Descriptor
    /// <summary>File descriptor for track_event.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrackEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChF0cmFja19ldmVudC5wcm90bxIVdW5pdHlfcGVyZmV0dG8ucHJvdG9zGhZk",
            "ZWJ1Z19hbm5vdGF0aW9uLnByb3RvIpkDCgpUcmFja0V2ZW50EgwKBG5hbWUY",
            "FyABKAkSEgoKY2F0ZWdvcmllcxgWIAMoCRI5CgR0eXBlGAkgASgOMiYudW5p",
            "dHlfcGVyZmV0dG8ucHJvdG9zLlRyYWNrRXZlbnQuVHlwZUgBiAEBEhcKCnRy",
            "YWNrX3V1aWQYCyABKARIAogBARIXCg1jb3VudGVyX3ZhbHVlGB4gASgDSAAS",
            "HgoUZG91YmxlX2NvdW50ZXJfdmFsdWUYLCABKAFIABJBChFkZWJ1Z19hbm5v",
            "dGF0aW9ucxgEIAMoCzImLnVuaXR5X3BlcmZldHRvLnByb3Rvcy5EZWJ1Z0Fu",
            "bm90YXRpb24iagoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASFAoQVFlQ",
            "RV9TTElDRV9CRUdJThABEhIKDlRZUEVfU0xJQ0VfRU5EEAISEAoMVFlQRV9J",
            "TlNUQU5UEAMSEAoMVFlQRV9DT1VOVEVSEARCFQoTY291bnRlcl92YWx1ZV9m",
            "aWVsZEIHCgVfdHlwZUINCgtfdHJhY2tfdXVpZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::UnityPerfetto.Protos.DebugAnnotationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::UnityPerfetto.Protos.TrackEvent), global::UnityPerfetto.Protos.TrackEvent.Parser, new[]{ "Name", "Categories", "Type", "TrackUuid", "CounterValue", "DoubleCounterValue", "DebugAnnotations" }, new[]{ "CounterValueField", "Type", "TrackUuid" }, new[]{ typeof(global::UnityPerfetto.Protos.TrackEvent.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TrackEvent : pb::IMessage<TrackEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrackEvent> _parser = new pb::MessageParser<TrackEvent>(() => new TrackEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrackEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UnityPerfetto.Protos.TrackEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackEvent(TrackEvent other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      categories_ = other.categories_.Clone();
      type_ = other.type_;
      trackUuid_ = other.trackUuid_;
      debugAnnotations_ = other.debugAnnotations_.Clone();
      switch (other.CounterValueFieldCase) {
        case CounterValueFieldOneofCase.CounterValue:
          CounterValue = other.CounterValue;
          break;
        case CounterValueFieldOneofCase.DoubleCounterValue:
          DoubleCounterValue = other.DoubleCounterValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackEvent Clone() {
      return new TrackEvent(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 23;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 22;
    private static readonly pb::FieldCodec<string> _repeated_categories_codec
        = pb::FieldCodec.ForString(178);
    private readonly pbc::RepeatedField<string> categories_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Categories {
      get { return categories_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private readonly static global::UnityPerfetto.Protos.TrackEvent.Types.Type TypeDefaultValue = global::UnityPerfetto.Protos.TrackEvent.Types.Type.Unspecified;

    private global::UnityPerfetto.Protos.TrackEvent.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::UnityPerfetto.Protos.TrackEvent.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "track_uuid" field.</summary>
    public const int TrackUuidFieldNumber = 11;
    private readonly static ulong TrackUuidDefaultValue = 0UL;

    private ulong trackUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TrackUuid {
      get { if ((_hasBits0 & 2) != 0) { return trackUuid_; } else { return TrackUuidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        trackUuid_ = value;
      }
    }
    /// <summary>Gets whether the "track_uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTrackUuid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "track_uuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTrackUuid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "counter_value" field.</summary>
    public const int CounterValueFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CounterValue {
      get { return HasCounterValue ? (long) counterValueField_ : 0L; }
      set {
        counterValueField_ = value;
        counterValueFieldCase_ = CounterValueFieldOneofCase.CounterValue;
      }
    }
    /// <summary>Gets whether the "counter_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCounterValue {
      get { return counterValueFieldCase_ == CounterValueFieldOneofCase.CounterValue; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "counter_value" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCounterValue() {
      if (HasCounterValue) {
        ClearCounterValueField();
      }
    }

    /// <summary>Field number for the "double_counter_value" field.</summary>
    public const int DoubleCounterValueFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DoubleCounterValue {
      get { return HasDoubleCounterValue ? (double) counterValueField_ : 0D; }
      set {
        counterValueField_ = value;
        counterValueFieldCase_ = CounterValueFieldOneofCase.DoubleCounterValue;
      }
    }
    /// <summary>Gets whether the "double_counter_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDoubleCounterValue {
      get { return counterValueFieldCase_ == CounterValueFieldOneofCase.DoubleCounterValue; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "double_counter_value" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDoubleCounterValue() {
      if (HasDoubleCounterValue) {
        ClearCounterValueField();
      }
    }

    /// <summary>Field number for the "debug_annotations" field.</summary>
    public const int DebugAnnotationsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::UnityPerfetto.Protos.DebugAnnotation> _repeated_debugAnnotations_codec
        = pb::FieldCodec.ForMessage(34, global::UnityPerfetto.Protos.DebugAnnotation.Parser);
    private readonly pbc::RepeatedField<global::UnityPerfetto.Protos.DebugAnnotation> debugAnnotations_ = new pbc::RepeatedField<global::UnityPerfetto.Protos.DebugAnnotation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::UnityPerfetto.Protos.DebugAnnotation> DebugAnnotations {
      get { return debugAnnotations_; }
    }

    private object counterValueField_;
    /// <summary>Enum of possible cases for the "counter_value_field" oneof.</summary>
    public enum CounterValueFieldOneofCase {
      None = 0,
      CounterValue = 30,
      DoubleCounterValue = 44,
    }
    private CounterValueFieldOneofCase counterValueFieldCase_ = CounterValueFieldOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CounterValueFieldOneofCase CounterValueFieldCase {
      get { return counterValueFieldCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCounterValueField() {
      counterValueFieldCase_ = CounterValueFieldOneofCase.None;
      counterValueField_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrackEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrackEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!categories_.Equals(other.categories_)) return false;
      if (Type != other.Type) return false;
      if (TrackUuid != other.TrackUuid) return false;
      if (CounterValue != other.CounterValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleCounterValue, other.DoubleCounterValue)) return false;
      if(!debugAnnotations_.Equals(other.debugAnnotations_)) return false;
      if (CounterValueFieldCase != other.CounterValueFieldCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= categories_.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasTrackUuid) hash ^= TrackUuid.GetHashCode();
      if (HasCounterValue) hash ^= CounterValue.GetHashCode();
      if (HasDoubleCounterValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleCounterValue);
      hash ^= debugAnnotations_.GetHashCode();
      hash ^= (int) counterValueFieldCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      debugAnnotations_.WriteTo(output, _repeated_debugAnnotations_codec);
      if (HasType) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (HasTrackUuid) {
        output.WriteRawTag(88);
        output.WriteUInt64(TrackUuid);
      }
      categories_.WriteTo(output, _repeated_categories_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Name);
      }
      if (HasCounterValue) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(CounterValue);
      }
      if (HasDoubleCounterValue) {
        output.WriteRawTag(225, 2);
        output.WriteDouble(DoubleCounterValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      debugAnnotations_.WriteTo(ref output, _repeated_debugAnnotations_codec);
      if (HasType) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (HasTrackUuid) {
        output.WriteRawTag(88);
        output.WriteUInt64(TrackUuid);
      }
      categories_.WriteTo(ref output, _repeated_categories_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Name);
      }
      if (HasCounterValue) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(CounterValue);
      }
      if (HasDoubleCounterValue) {
        output.WriteRawTag(225, 2);
        output.WriteDouble(DoubleCounterValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += categories_.CalculateSize(_repeated_categories_codec);
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasTrackUuid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TrackUuid);
      }
      if (HasCounterValue) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CounterValue);
      }
      if (HasDoubleCounterValue) {
        size += 2 + 8;
      }
      size += debugAnnotations_.CalculateSize(_repeated_debugAnnotations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrackEvent other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      categories_.Add(other.categories_);
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasTrackUuid) {
        TrackUuid = other.TrackUuid;
      }
      debugAnnotations_.Add(other.debugAnnotations_);
      switch (other.CounterValueFieldCase) {
        case CounterValueFieldOneofCase.CounterValue:
          CounterValue = other.CounterValue;
          break;
        case CounterValueFieldOneofCase.DoubleCounterValue:
          DoubleCounterValue = other.DoubleCounterValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            debugAnnotations_.AddEntriesFrom(input, _repeated_debugAnnotations_codec);
            break;
          }
          case 72: {
            Type = (global::UnityPerfetto.Protos.TrackEvent.Types.Type) input.ReadEnum();
            break;
          }
          case 88: {
            TrackUuid = input.ReadUInt64();
            break;
          }
          case 178: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
          case 186: {
            Name = input.ReadString();
            break;
          }
          case 240: {
            CounterValue = input.ReadInt64();
            break;
          }
          case 353: {
            DoubleCounterValue = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 34: {
            debugAnnotations_.AddEntriesFrom(ref input, _repeated_debugAnnotations_codec);
            break;
          }
          case 72: {
            Type = (global::UnityPerfetto.Protos.TrackEvent.Types.Type) input.ReadEnum();
            break;
          }
          case 88: {
            TrackUuid = input.ReadUInt64();
            break;
          }
          case 178: {
            categories_.AddEntriesFrom(ref input, _repeated_categories_codec);
            break;
          }
          case 186: {
            Name = input.ReadString();
            break;
          }
          case 240: {
            CounterValue = input.ReadInt64();
            break;
          }
          case 353: {
            DoubleCounterValue = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TrackEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Slice events are events that have a begin and end timestamp, i.e. a
        /// duration. They can be nested similar to a callstack: If, on the same
        /// track, event B begins after event A, but before A ends, B is a child
        /// event of A and will be drawn as a nested event underneath A in the UI.
        /// Note that child events should always end before their parents (e.g. B
        /// before A).
        ///
        /// Each slice event is formed by a pair of BEGIN + END events. The END event
        /// does not need to repeat any TrackEvent fields it has in common with its
        /// corresponding BEGIN event. Arguments and debug annotations of the BEGIN +
        /// END pair will be merged during trace import.
        ///
        /// Note that we deliberately chose not to support COMPLETE events (which
        /// would specify a duration directly) since clients would need to delay
        /// writing them until the slice is completed, which can result in reordered
        /// events in the trace and loss of unfinished events at the end of a trace.
        /// </summary>
        [pbr::OriginalName("TYPE_SLICE_BEGIN")] SliceBegin = 1,
        [pbr::OriginalName("TYPE_SLICE_END")] SliceEnd = 2,
        /// <summary>
        /// Instant events are nestable events without duration. They can be children
        /// of slice events on the same track.
        /// </summary>
        [pbr::OriginalName("TYPE_INSTANT")] Instant = 3,
        /// <summary>
        /// Event that provides a value for a counter track. |track_uuid| should
        /// refer to a counter track and |counter_value| set to the new value. Note
        /// that most other TrackEvent fields (e.g. categories, name, ..) are not
        /// supported for TYPE_COUNTER events. See also CounterDescriptor.
        /// </summary>
        [pbr::OriginalName("TYPE_COUNTER")] Counter = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
