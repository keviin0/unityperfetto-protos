syntax = "proto3";

import "debug_annotation.proto";

package unity_perfetto.protos;

message TrackEvent {
    string name = 23;

    repeated string categories = 22;

    enum Type {
        TYPE_UNSPECIFIED = 0;

        // Slice events are events that have a begin and end timestamp, i.e. a
        // duration. They can be nested similar to a callstack: If, on the same
        // track, event B begins after event A, but before A ends, B is a child
        // event of A and will be drawn as a nested event underneath A in the UI.
        // Note that child events should always end before their parents (e.g. B
        // before A).
        //
        // Each slice event is formed by a pair of BEGIN + END events. The END event
        // does not need to repeat any TrackEvent fields it has in common with its
        // corresponding BEGIN event. Arguments and debug annotations of the BEGIN +
        // END pair will be merged during trace import.
        //
        // Note that we deliberately chose not to support COMPLETE events (which
        // would specify a duration directly) since clients would need to delay
        // writing them until the slice is completed, which can result in reordered
        // events in the trace and loss of unfinished events at the end of a trace.
        TYPE_SLICE_BEGIN = 1;
        TYPE_SLICE_END = 2;

        // Instant events are nestable events without duration. They can be children
        // of slice events on the same track.
        TYPE_INSTANT = 3;

        // Event that provides a value for a counter track. |track_uuid| should
        // refer to a counter track and |counter_value| set to the new value. Note
        // that most other TrackEvent fields (e.g. categories, name, ..) are not
        // supported for TYPE_COUNTER events. See also CounterDescriptor.
        TYPE_COUNTER = 4;
    }
    optional Type type = 9;
    optional uint64 track_uuid = 11;
    oneof counter_value_field {
        int64 counter_value = 30;
        double double_counter_value = 44;
    }

    repeated DebugAnnotation debug_annotations = 4;
}